#!/usr/bin/env bash

ostype() {
    uname | lower
}

os_detect() {
    export PLATFORM
    case "$(ostype)" in
        *'linux'*)  PLATFORM='linux'   ;;
        *'darwin'*) PLATFORM='osx'     ;;
        *'bsd'*)    PLATFORM='bsd'     ;;
        *)          PLATFORM='unknown' ;;
    esac
}

is_osx() {
    os_detect
    if [ "$PLATFORM" = "osx" ]; then
        return 0
    else
        return 1
    fi
}

is_linux() {
    os_detect
    if [ "$PLATFORM" = "linux" ]; then
        return 0
    else
        return 1
    fi
}

is_bsd() {
    os_detect
    if [ "$PLATFORM" = "bsd" ]; then
        return 0
    else
        return 1
    fi
}

# get_os returns OS name of the platform that is runnning
get_os() {
    local os
    for os in osx linux bsd; do
        if is_$os; then
            echo $os
        fi
    done
}

is_exists() {
    type "$1" > /dev/null 2>&1
    return $?
}

has() {
    is_exists "$@"
}

contains() {
    string="$1"
    substring="$2"
    if [ "${string#*$substring}" != "$string" ]; then
        return 0    # $substring is in $string
    else
        return 1    # $substring is not in $string
    fi
}

e_arrow() {
    printf " \033[37;1m%s\033[m\n" "==> $*"
}

e_arrow_green() {
    printf " \033[32;1m%s\033[m\n" "==> $*"
}

e_arrow_blue() {
    printf " \033[34;1m%s\033[m\n" "==> $*"
}

e_ok() {
    printf " \033[37;1m%s...\033[32mOK\033[m" "âœ”  $*"
}

e_success() {
    printf " \033[32m%s\033[m" "$*"
}

e_done() {
    printf " \033[37;1Done! %s\033[m" "$*"
}

e_info() {
    printf " \033[36mInfo: %s\033[m\n" "$*"
}

e_warning() {
    printf " \033[33mWarning: %s\033[m\n" "$*"
}

e_error() {
    printf " \033[31mError: %s\033[m\n" "$*" 1>&2
}

die() {
    e_error "$1" 1>&2
    exit "${2:-1}"
}


if [ -z "${DOTPATH:-}" ]; then
    DOTPATH="${HOME}/.dotfiles"; export DOTPATH
fi
DOTFILE_GITHUB="https://github.com/d-salt/dotfiles.git"; export DOTFILE_GITHUB

dotfiles_download() {
    if [ -d "$DOTPATH" ]; then
        echo "Error: $DOTPATH: already exists"
        exit 1
    fi

    if is_exists "git"; then
        git clone "$DOTFILE_GITHUB" "$DOTPATH"
    else
        echo "Error: require: git"
        exit 1
    fi
    echo "Success Download"
}

dotfiles_deploy() {
    echo "Deploying dotfiles..."

    if [ ! -d $DOTPATH ]; then
        echo "Error: $DOTPATH: not found"
        exit 1
    fi

    cd "$DOTPATH"
    make deploy
    echo "Success Deploy"
}

dotfiles_initialize() {
    if [ "$1" = "init" ]; then
        echo "Initializing dotfiles..."

        if [ -f Makefile ]; then
            make init
        else
            echo "Error: Makefile: not found"
            exit 1
        fi
        echo "Success Initialize"
    fi
}

# A script for the file named "install"
dotfiles_install() {
    dotfiles_download &&
    dotfiles_deploy &&
    dotfiles_initialize "$@"
}

if echo "$-" | grep -q "i"; then
    # -> source a.sh
    VITALIZED=1
    export VITALIZED

    : return
else
    dotfiles_install "$@"

    # Restart shell if specified "bash -c $(curl -L {URL})"
    # not restart:
    #   curl -L {URL} | bash
    if [ -p /dev/stdin ]; then
        echo "Now continue with Rebooting your shell"
    else
        echo "Restarting your shell..."
        exec "${SHELL}"
    fi
fi

